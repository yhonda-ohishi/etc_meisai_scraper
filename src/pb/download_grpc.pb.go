// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: download.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DownloadService_DownloadSync_FullMethodName     = "/etc_meisai.download.v1.DownloadService/DownloadSync"
	DownloadService_DownloadAsync_FullMethodName    = "/etc_meisai.download.v1.DownloadService/DownloadAsync"
	DownloadService_GetJobStatus_FullMethodName     = "/etc_meisai.download.v1.DownloadService/GetJobStatus"
	DownloadService_GetAllAccountIDs_FullMethodName = "/etc_meisai.download.v1.DownloadService/GetAllAccountIDs"
)

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ダウンロードサービス
type DownloadServiceClient interface {
	// 同期ダウンロード
	DownloadSync(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	// 非同期ダウンロード開始
	DownloadAsync(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadJobResponse, error)
	// ジョブステータス取得
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobStatus, error)
	// 全アカウントID取得
	GetAllAccountIDs(ctx context.Context, in *GetAllAccountIDsRequest, opts ...grpc.CallOption) (*GetAllAccountIDsResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) DownloadSync(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, DownloadService_DownloadSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) DownloadAsync(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadJobResponse)
	err := c.cc.Invoke(ctx, DownloadService_DownloadAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, DownloadService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) GetAllAccountIDs(ctx context.Context, in *GetAllAccountIDsRequest, opts ...grpc.CallOption) (*GetAllAccountIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAccountIDsResponse)
	err := c.cc.Invoke(ctx, DownloadService_GetAllAccountIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations should embed UnimplementedDownloadServiceServer
// for forward compatibility.
//
// ダウンロードサービス
type DownloadServiceServer interface {
	// 同期ダウンロード
	DownloadSync(context.Context, *DownloadRequest) (*DownloadResponse, error)
	// 非同期ダウンロード開始
	DownloadAsync(context.Context, *DownloadRequest) (*DownloadJobResponse, error)
	// ジョブステータス取得
	GetJobStatus(context.Context, *GetJobStatusRequest) (*JobStatus, error)
	// 全アカウントID取得
	GetAllAccountIDs(context.Context, *GetAllAccountIDsRequest) (*GetAllAccountIDsResponse, error)
}

// UnimplementedDownloadServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadServiceServer struct{}

func (UnimplementedDownloadServiceServer) DownloadSync(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSync not implemented")
}
func (UnimplementedDownloadServiceServer) DownloadAsync(context.Context, *DownloadRequest) (*DownloadJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAsync not implemented")
}
func (UnimplementedDownloadServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedDownloadServiceServer) GetAllAccountIDs(context.Context, *GetAllAccountIDsRequest) (*GetAllAccountIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccountIDs not implemented")
}
func (UnimplementedDownloadServiceServer) testEmbeddedByValue() {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	// If the following call pancis, it indicates UnimplementedDownloadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_DownloadSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadSync(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_DownloadAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadAsync(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_GetAllAccountIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccountIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).GetAllAccountIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_GetAllAccountIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).GetAllAccountIDs(ctx, req.(*GetAllAccountIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etc_meisai.download.v1.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadSync",
			Handler:    _DownloadService_DownloadSync_Handler,
		},
		{
			MethodName: "DownloadAsync",
			Handler:    _DownloadService_DownloadAsync_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _DownloadService_GetJobStatus_Handler,
		},
		{
			MethodName: "GetAllAccountIDs",
			Handler:    _DownloadService_GetAllAccountIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "download.proto",
}
