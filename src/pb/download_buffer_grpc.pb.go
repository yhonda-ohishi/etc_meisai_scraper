// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: download_buffer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DownloadBufferService_DownloadAsBuffer_FullMethodName = "/etc_meisai.download.v2.DownloadBufferService/DownloadAsBuffer"
	DownloadBufferService_DownloadStream_FullMethodName   = "/etc_meisai.download.v2.DownloadBufferService/DownloadStream"
	DownloadBufferService_DownloadAsProto_FullMethodName  = "/etc_meisai.download.v2.DownloadBufferService/DownloadAsProto"
)

// DownloadBufferServiceClient is the client API for DownloadBufferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// バッファベースのダウンロードサービス
type DownloadBufferServiceClient interface {
	// CSVデータをバイナリで直接返す
	DownloadAsBuffer(ctx context.Context, in *BufferDownloadRequest, opts ...grpc.CallOption) (*BufferResponse, error)
	// ストリーミングでチャンク送信
	DownloadStream(ctx context.Context, in *BufferDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunkResponse], error)
	// Protocol Buffersメッセージとして返す
	DownloadAsProto(ctx context.Context, in *BufferDownloadRequest, opts ...grpc.CallOption) (*ProtoResponse, error)
}

type downloadBufferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadBufferServiceClient(cc grpc.ClientConnInterface) DownloadBufferServiceClient {
	return &downloadBufferServiceClient{cc}
}

func (c *downloadBufferServiceClient) DownloadAsBuffer(ctx context.Context, in *BufferDownloadRequest, opts ...grpc.CallOption) (*BufferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BufferResponse)
	err := c.cc.Invoke(ctx, DownloadBufferService_DownloadAsBuffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadBufferServiceClient) DownloadStream(ctx context.Context, in *BufferDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DownloadBufferService_ServiceDesc.Streams[0], DownloadBufferService_DownloadStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BufferDownloadRequest, ChunkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DownloadBufferService_DownloadStreamClient = grpc.ServerStreamingClient[ChunkResponse]

func (c *downloadBufferServiceClient) DownloadAsProto(ctx context.Context, in *BufferDownloadRequest, opts ...grpc.CallOption) (*ProtoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProtoResponse)
	err := c.cc.Invoke(ctx, DownloadBufferService_DownloadAsProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadBufferServiceServer is the server API for DownloadBufferService service.
// All implementations should embed UnimplementedDownloadBufferServiceServer
// for forward compatibility.
//
// バッファベースのダウンロードサービス
type DownloadBufferServiceServer interface {
	// CSVデータをバイナリで直接返す
	DownloadAsBuffer(context.Context, *BufferDownloadRequest) (*BufferResponse, error)
	// ストリーミングでチャンク送信
	DownloadStream(*BufferDownloadRequest, grpc.ServerStreamingServer[ChunkResponse]) error
	// Protocol Buffersメッセージとして返す
	DownloadAsProto(context.Context, *BufferDownloadRequest) (*ProtoResponse, error)
}

// UnimplementedDownloadBufferServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadBufferServiceServer struct{}

func (UnimplementedDownloadBufferServiceServer) DownloadAsBuffer(context.Context, *BufferDownloadRequest) (*BufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAsBuffer not implemented")
}
func (UnimplementedDownloadBufferServiceServer) DownloadStream(*BufferDownloadRequest, grpc.ServerStreamingServer[ChunkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadStream not implemented")
}
func (UnimplementedDownloadBufferServiceServer) DownloadAsProto(context.Context, *BufferDownloadRequest) (*ProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAsProto not implemented")
}
func (UnimplementedDownloadBufferServiceServer) testEmbeddedByValue() {}

// UnsafeDownloadBufferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadBufferServiceServer will
// result in compilation errors.
type UnsafeDownloadBufferServiceServer interface {
	mustEmbedUnimplementedDownloadBufferServiceServer()
}

func RegisterDownloadBufferServiceServer(s grpc.ServiceRegistrar, srv DownloadBufferServiceServer) {
	// If the following call pancis, it indicates UnimplementedDownloadBufferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DownloadBufferService_ServiceDesc, srv)
}

func _DownloadBufferService_DownloadAsBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadBufferServiceServer).DownloadAsBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadBufferService_DownloadAsBuffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadBufferServiceServer).DownloadAsBuffer(ctx, req.(*BufferDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadBufferService_DownloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BufferDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloadBufferServiceServer).DownloadStream(m, &grpc.GenericServerStream[BufferDownloadRequest, ChunkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DownloadBufferService_DownloadStreamServer = grpc.ServerStreamingServer[ChunkResponse]

func _DownloadBufferService_DownloadAsProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadBufferServiceServer).DownloadAsProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadBufferService_DownloadAsProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadBufferServiceServer).DownloadAsProto(ctx, req.(*BufferDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadBufferService_ServiceDesc is the grpc.ServiceDesc for DownloadBufferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadBufferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etc_meisai.download.v2.DownloadBufferService",
	HandlerType: (*DownloadBufferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadAsBuffer",
			Handler:    _DownloadBufferService_DownloadAsBuffer_Handler,
		},
		{
			MethodName: "DownloadAsProto",
			Handler:    _DownloadBufferService_DownloadAsProto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadStream",
			Handler:       _DownloadBufferService_DownloadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "download_buffer.proto",
}
